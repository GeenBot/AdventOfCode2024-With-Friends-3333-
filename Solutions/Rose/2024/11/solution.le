use std/collections/hashmap;
use std/collections/array;
use std/split;
use std/cast;
use std/io;

fn HashMap::sum<T, U>(HashMap<T, U> *self) {
    i64 sum = 0;

    for key in self.keys() {
        sum += self.get(key);
    }

    return sum;
}

fn blink(i64 s) -> i64[] {
    let result = [];

    if s == 0 {
        result.push(1);
        return result;
    }

    let ss = "{}".format(s);
    let l = ss.len();
    let hl = l / 2;

    if l % 2 == 0 {
        result.push(i64::parse(ss.slice(0, hl)));
        result.push(i64::parse(ss.slice(hl, l)));
    } else {
        result.push(2024 * s);
    }

    return result;
}

fn sol(HashMap<i64, i64> *sc) {
    let nsc = HashMap::new<i64, i64>();

    for s in sc.keys() {
        let c = sc[s];
        let ns = blink(s);

        for val in ns {
            if !nsc.contains_key(val) {
                nsc[val] = 0;
            }

            nsc[val] += c;
        }
    }

    return nsc;
}

fn main(i32 argc, string *argv) {
    let contents = io::read_to_string(argv[1]);
    let tokens = contents.split(" ");

    i64[] ss = [];
    let sc = HashMap::new<i64, i64>();

    for token in tokens {
        ss.push(i64::parse(token));
    }

    for s in ss {
        if !sc.contains_key(s) {
            sc[s] = 0;
        }

        sc[s] += 1;
    }

    for let i = 0; i < 75; i += 1 {
        if i == 25 {
            io::dbg(sc.sum());
        }

        sc = sol(sc);
    }

    io::dbg(sc.sum());
}
