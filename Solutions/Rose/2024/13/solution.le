use util;

struct Machine {
    i64[] a;
    i64[] b;
    i64[] p;
};

fn Machine::new(i64[] a, i64[] b, i64[] p) {
    Machine *machine = #env.allocator.alloc(#size(Machine));

    machine.a = a;
    machine.b = b;
    machine.p = p;

    return machine;
}

fn parse(string contents, i64 offset) -> Machine *[] {
    let parts = contents.split("\n\n");
    let machines = [];

    for part in parts {
        let x = part.split("\n");
        let machine = Machine::new(
            x[0].nums(),
            x[1].nums(),
            x[2].nums()
        );

        machine.p[0] += offset;
        machine.p[1] += offset;
        machines.push(machine);
    }

    return machines;
}

fn solution(string contents, i64 offset) {
    let machines = parse(contents, offset);
    i64 total = 0;

    for machine in machines {
        let a = machine.a;
        let b = machine.b;
        let p = machine.p;

        let d1 = p[0] * b[1] - p[1] * b[0];
        let d2 = a[0] * b[1] - a[1] * b[0];

        if ((f64)d1 / d2) != d1 / d2 {
            continue;
        }

        let m = d1 / d2;
        let d3 = p[1] - a[1] * m;

        if ((f64)d3 / b[1]) != d3 / b[1] {
            continue;
        }

        let n = d3 / b[1];
        total += 3 * m + n;
    }

    return total;
}

fn main(string[] args) {
    let contents = io::read_to_string(args[1]);
    $dbg(solution(contents, 0));
    $dbg(solution(contents, 1e13));
}
