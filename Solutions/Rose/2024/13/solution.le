use std/collections/array;
use std/split;
use std/types;
use std/cast;
use std/io;

use util;

struct Machine {
    Array<i64> *a;
    Array<i64> *b;
    Array<i64> *p;
};

fn Machine::new(Array<i64> *a, Array<i64> *b, Array<i64> *p) {
    Machine *machine = malloc(#size(Machine));
    *machine = malloc(#size(Machine));

    machine.a = a;
    machine.b = b;
    machine.p = p;

    return machine;
}

fn parse(string contents, i64 offset) {
    Array<string> *parts = contents.split("\n\n");
    Array<Machine *> *machines = Array::new();

    for i32 i = 0; i < parts.len(); i += 1 {
        Array<string> *inner = parts[i].split("\n");
        Machine *machine = Machine::new(
            extract_numbers(inner[0]),
            extract_numbers(inner[1]),
            extract_numbers(inner[2])
        );

        machine.p[0] += offset;
        machine.p[1] += offset;

        machines.push(machine);
    }

    return machines;
}

fn solution(string contents, i64 offset) {
    Array<Machine *> *machines = parse(contents, offset);
    i64 total = 0;

    for i32 i = 0; i < machines.len(); i += 1 {
        Machine *machine = machines[i];
        Array<i64> *a = machine.a;
        Array<i64> *b = machine.b;
        Array<i64> *p = machine.p;

        i64 d1 = p[0] * b[1] - p[1] * b[0];
        i64 d2 = a[0] * b[1] - a[1] * b[0];

        if ((f64)d1 / d2) != d1 / d2 {
            continue;
        }

        i64 m = d1 / d2;
        i64 d3 = p[1] - a[1] * m;

        if ((f64)d3 / b[1]) != d3 / b[1] {
            continue;
        }

        i64 n = d3 / b[1];
        total += 3 * m + n;
    }

    return total;
}

fn main(i32 argc, string *argv) {
    string contents = io::read_to_string(argv[1]);
    io::dbg(solution(contents, 0));
    io::dbg(solution(contents, 1e13));
}
