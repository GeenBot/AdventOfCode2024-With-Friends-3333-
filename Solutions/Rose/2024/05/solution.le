use std/collections/array;
use std/split;
use std/cast;
use std/math;
use std/io;

fn is_ordered(i32[][] rs, i32[] u) {
    for r in rs {
        let x = r[0];
        let y = r[1];

        if u.includes(x) && u.includes(y) && u.index(x) > u.index(y) {
            return false;
        }
    }

    return true;
}

fn reorder(i32[][] rs, i32[] u) {
    while true {
        let s = false;

        for let i = 0; i < u.len() - 1; i += 1 {
            for r in rs {
                if u[i] == r[0] && u[i + 1] == r[1] {
                    i32 temp = u[i];
                    u[i] = u[i + 1];
                    u[i + 1] = temp;

                    s = true;
                    break;
                }
            }
        }

        if !s { break; }
    }

    return u;
}

fn s1(i32[][] rs, i32[][] us) {
    i32[] res = [];

    for u in us {
        if is_ordered(rs, u) {
            let mid = math::floor(u.len() / 2);
            res.push(u[mid]);
        }
    }

    let sum = res.sum();
    return sum;
}

fn s2(i32[][] rs, i32[][] us) {
    i32[] res = [];

    for u in us {
        if !is_ordered(rs, u) {
            let u2 = reorder(rs, u.clone());
            let mid = math::floor(u2.len() / 2);
            res.push(u2[mid]);
        }
    }

    let sum = res.sum();
    return sum;
}

fn get_list(string list, string delimiter) {
    let parts = list.split("\n");
    i32[][] res = [];

    for part in parts {
        let inner = part.split(delimiter);
        i32[] numbers = [];

        for let j = 0; j < inner.len(); j += 1 {
            numbers.push(i32::parse(inner[j]));
        }

        res.push(numbers);
    }

    return res;
}

fn main(i32 argc, string *argv) {
    let contents = io::read_to_string(argv[1]);
    let parts = contents.split("\n\n");

    let rs = get_list(parts[0], "|");
    let us = get_list(parts[1], ",");

    io::dbg(s1(rs, us));
    io::dbg(s2(rs, us));
}
