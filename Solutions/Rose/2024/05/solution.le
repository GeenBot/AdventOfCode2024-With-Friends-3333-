use std/collections/array;
use std/split;
use std/cast;
use std/math;
use std/io;

fn is_ordered(Array<void *> *rs, Array<i32> *u) {
    for i32 i = 0; i < rs.len(); i += 1 {
        Array<i32> *r = rs[i];
        i32 x = r[0];
        i32 y = r[1];

        if u.includes(x) && u.includes(y) && u.index(x) > u.index(y) {
            return false;
        }
    }

    return true;
}

fn reorder(Array<void *> *rs, Array<i32> *u) {
    while true {
        bool s = false;

        for i32 i = 0; i < u.len() - 1; i += 1 {
            for i32 j = 0; j < rs.len(); j += 1 {
                Array<i32> *r = rs[j];
                if u[i] == r[0] && u[i + 1] == r[1] {
                    i32 temp = u[i];
                    u[i] = u[i + 1];
                    u[i + 1] = temp;

                    s = true;
                    break;
                }
            }
        }

        if !s { break; }
    }

    return u;
}

fn s1(Array<void *> *rs, Array<void *> *us) {
    Array<i32> *res = Array::new();
    defer res.free();

    for i32 i = 0; i < us.len(); i += 1 {
        Array<i32> *u = us[i];

        if is_ordered(rs, u) {
            i32 mid = math::floor(u.len() / 2);
            res.push(u[mid]);
        }
    }

    i32 sum = res.sum();
    return sum;
}

fn s2(Array<void *> *rs, Array<void *> *us) {
    Array<i32> *res = Array::new();
    defer res.free();

    for i32 i = 0; i < us.len(); i += 1 {
        Array<i32> *u = us[i];

        if !is_ordered(rs, u) {
            Array<i32> *u2 = reorder(rs, u.clone());
            i32 mid = math::floor(u2.len() / 2);
            res.push(u2[mid]);
        }
    }

    i32 sum = res.sum();
    return sum;
}

fn get_list(string list, string delimiter) {
    Array<string> *parts = list.split("\n");
    Array<void *> *res = Array::new();

    for i32 i = 0; i < parts.len(); i += 1 {
        Array<string> *inner = parts[i].split(delimiter);
        Array<i32> *numbers = Array::new();

        for i32 j = 0; j < inner.len(); j += 1 {
            numbers.push(i32::parse(inner[j]));
        }

        res.push(numbers);
    }

    return res;
}

fn main() {
    string contents = io::read_to_string("input.txt");
    Array<string> *parts = contents.split("\n\n");
    string r_data = parts[0];
    string u_data = parts[1];

    Array<void *> *rs = get_list(r_data, "|");
    Array<void *> *us = get_list(u_data, ",");

    // for i32 i = 0; i < rs.len(); i += 1 {
    //     Array<i32> *r = rs[i];
    //     io::dbg(r);
    // }

    // for i32 i = 0; i < us.len(); i += 1 {
    //     Array<i32> *u = us[i];
    //     io::dbg(u);
    // }

    io::dbg(s1(rs, us));
    io::dbg(s2(rs, us));
}
