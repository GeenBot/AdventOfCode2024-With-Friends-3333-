use util;

fn is_safe(i64[] r) {
    i64[] diff = Array::with_capacity(r.len() - 1);

    for let i = 0; i < r.len() - 1; i += 1 {
        diff.push(r[i + 1] - r[i]);
    }

    let inc = true;
    let dec = true;

    for d in diff {
        if d < 1 || d > 3 {
            inc = false;
        }

        if d < -3 || d > -1 {
            dec = false;
        }

        if !inc && !dec {
            return false;
        }
    }

    return inc || dec;
}

fn is_safe2(i64[] r) {
    if is_safe(r) {
        return true;
    }

    for let i = 0; i < r.len(); i += 1 {
        let r2 = r.clone();
        r2.remove(i);

        if is_safe(r2) {
            return true;
        }
    }

    return false;
}

fn solution(string d, bool p2) -> i32 {
    let lines = d.split("\n");
    let c = 0;

    for i64[] r in lines.map(string::nums) {
        if p2 {
            if is_safe2(r) {
                c += 1;
            }
        } else {
            if is_safe(r) {
                c += 1;
            }
        }
    }

    return c;
}

fn main(i32 argc, string *argv) {
    let input = io::read_to_string(argv[1]);
    io::dbg(solution(input, false));
    io::dbg(solution(input, true));
}
