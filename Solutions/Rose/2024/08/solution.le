use std/collections/array;
use std/split;
use std/io;

fn is_valid(i32 r, i32 c, i32 rows, i32 cols) {
    return (r >= 0) && (r < rows) && (c >= 0) && (c < cols);
}

fn encode(i32 x, i32 y, i32 cols) -> i32 {
    return y * cols + x;
}

fn get_coords(string[] grid) -> i32[][] {
    let coords = [];

    for let row = 0; row < grid.len(); row += 1 {
        for let col = 0; col < grid[0].len(); col += 1 {
            let cell = grid[row][col];

            if cell != '.' {
                let encoded = encode(col, row, grid[0].len());

                while coords.len() <= cell {
                    coords.push(Array::new<i32>());
                }

                coords[cell].push(encoded);
            }
        }
    }

    return coords;
}

fn solution(string[] grid, i32[][] coords, bool part2) {
    i32[] antinodes = [];

    for coord in coords {
        if coord.is_empty() {
            continue;
        }

        for j in coord {
            let x1 = j % grid[0].len();
            let y1 = j / grid[0].len();

            for k in coord {
                if j == k {
                    continue;
                }

                let x2 = k % grid[0].len();
                let y2 = k / grid[0].len();

                let dr = x1 - x2;
                let dc = y1 - y2;

                if part2 {
                    let nr = x1;
                    let nc = y1;

                    while is_valid(nr, nc, grid.len(), grid[0].len()) {
                        let encoded = encode(nr, nc, grid[0].len());

                        if !antinodes.contains(encoded) {
                            antinodes.push(encoded);
                        }

                        nr += dr;
                        nc += dc;
                    }
                } else {
                    let nr = x1 + dr;
                    let nc = y1 + dc;

                    if is_valid(nr, nc, grid.len(), grid[0].len()) {
                        let encoded = encode(nr, nc, grid[0].len());

                        if !antinodes.contains(encoded) {
                            antinodes.push(encoded);
                        }
                    }
                }
            }
        }
    }

    let length = antinodes.len();
    return length;
}

fn main(i32 argc, string *argv) {
    let contents = io::read_to_string(argv[1]);
    let grid = contents.split("\n");
    let coords = get_coords(grid);

    io::dbg(solution(grid, coords, false));
    io::dbg(solution(grid, coords, true));
}
