use std/collections/hashset;
use std/collections/hashmap;
use std/prelude;
global pub;

fn i64::mod(i64 self, i64 other) {
    return (self % other + other) % other;
}

fn i32::mod(i32 self, i32 other) {
    return (self % other + other) % other;
}

fn string::nums(string self) {
    i64[] numbers = [];
    string current = "";
    bool hit = false;

    for i32 i = 0; i < self.len(); i += 1 {
        if (i < self.len() - 1) && (self[i] == '-') && (self[i + 1].is_digit()) {
            current.push(self[i]);
            hit = true;
            continue;
        }

        if self[i].is_digit() {
            current.push(self[i]);
            hit = true;
            continue;
        }

        if hit {
            numbers.push(i64::parse(current));
            current = "";
            hit = false;
        }
    }

    if !current.is_empty() {
        numbers.push(i64::parse(current));
    }

    return numbers;
}

const (i32, i32)[] dir4 = [
    $(-1, 0),
    $(0, 1),
    $(1, 0),
    $(0, -1),
];

fn Array::heap_pop<T>(T[] pq) -> T {
    if pq.is_empty() {
        return nil;
    }

    let result = pq.first();
    pq[0] = pq.last();
    pq.pop();

    if pq.is_empty() {
        return result;
    }

    let i = 0;
    while true {
        let smallest = i;
        let left = 2 * i + 1;
        let right = 2 * i + 2;

        if left < pq.len() && pq[left].x < pq[smallest].x {
            smallest = left;
        }

        if right < pq.len() && pq[right].x < pq[smallest].x {
            smallest = right;
        }

        if smallest == i {
            break;
        }

        let temp = pq[i];
        pq[i] = pq[smallest];
        pq[smallest] = temp;

        i = smallest;
    }

    return result;
}

fn Array::heap_push<T>(T[] pq, T value) {
    pq.push(value);
    let i = pq.len() - 1;

    while i > 0 {
        let parent = (i - 1) / 2;

        if pq[parent].x <= pq[i].x {
            break;
        }

        let temp = pq[i];
        pq[i] = pq[parent];
        pq[parent] = temp;
        i = parent;
    }
}
