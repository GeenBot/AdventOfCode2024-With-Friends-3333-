use std/types;
use std/cast;
global pub;

fn i64::mod(i64 self, i64 other) {
    return (self % other + other) % other;
}

fn string::nums(string self) {
    i64[] numbers = [];
    string current = "";
    bool hit = false;

    for i32 i = 0; i < self.len(); i += 1 {
        if (i < self.len() - 1) && (self[i] == '-') && (self[i + 1].is_digit()) {
            current.push(self[i]);
            hit = true;
            continue;
        }

        if self[i].is_digit() {
            current.push(self[i]);
            hit = true;
            continue;
        }

        if hit {
            numbers.push(i64::parse(current));
            current = "";
            hit = false;
        }
    }

    if !current.is_empty() {
        numbers.push(i64::parse(current));
    }

    return numbers;
}

fn encode2<T>(T a, T b) {
    return ((a + 512) << 12) | ((b + 128) & 0xFFF);
}

fn encode3<T>(T a, T b, T c) {
    return ((a + 512) << 10) | ((b + 128) << 2) | c;
}

fn decode2<T>(T encoded) {
    T *res = malloc(2 * #size(T));

    res[0] = (encoded >> 12) - 512;
    res[1] = (encoded & 0xFFF) - 128;

    return res;
}

fn decode3<T>(T encoded) {
    T *res = malloc(3 * #size(T));

    res[0] = (encoded >> 10) - 512;
    res[1] = (encoded >> 2 & 0xFF) - 128;
    res[2] = encoded & 0x03;

    return res;
}

fn tuple<T>(T x, T y) {
    T *res = malloc(2 * #size(T));

    res[0] = x;
    res[1] = y;

    return res;
}

const i32 *[] dir4 = [
    tuple(-1, 0),
    tuple(0, 1),
    tuple(1, 0),
    tuple(0, -1),
];
