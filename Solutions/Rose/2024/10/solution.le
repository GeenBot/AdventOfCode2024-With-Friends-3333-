use ../util;

fn find(i32[][] grid) -> (i32, i32)[] {
    let ts = [];

    for let row = 0; row < grid.len(); row += 1 {
        for let col = 0; col < grid[0].len(); col += 1 {
            if grid[row][col] == 0 {
                ts.push($(row, col));
            }
        }
    }

    return ts;
}

fn search(i32[][] grid, (i32, i32) start, bool part2) -> i32 {
    let v = HashSet::new<(i32, i32)>();
    let stack = [start];
    let c = 0;

    while !stack.is_empty() {
        (i32, i32) inner = stack.pop();
        let x = inner.x;
        let y = inner.y;

        if !part2 {
            let p = $(x, y);

            if v.contains(p) {
                continue;
            }

            v.add(p);
        }

        if grid[x][y] == 9 {
            c += 1;
        }

        for dir in dir4 {
            i32 nx = x + dir.x;
            i32 ny = y + dir.y;

            if nx >= 0 && nx < grid.len() && ny >= 0 && ny < grid[0].len() {
                if grid[nx][ny] == grid[x][y] + 1 {
                    stack.push($(nx, ny));
                }
            }
        }
    }

    return c;
}

fn solution(i32[][] grid, (i32, i32)[] ts, bool part2) {
    let c = 0;

    for t in ts {
        c += search(grid, t, part2);
    }

    return c;
}

fn main(string[] args) {
    let contents = io::read_to_string(args[1]);
    let grid = contents.split("\n")
        .map<char[]>(Array::from_string)
        .map<string>(fn(char[] x) x.join(" "))
        .map<i64[]>(string::nums)
        .map<i32[]>(Array::truncate);
    let ts = find(grid);

    $dbg(solution(grid, ts, false));
    $dbg(solution(grid, ts, true));
}
