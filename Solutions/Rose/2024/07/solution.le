use ../util;

fn concat(i64 a, i64 b) -> i64 {
    if b < 10 { return a * 10 + b; }
    if b < 100 { return a * 100 + b; }
    if b < 1000 { return a * 1000 + b; }
}

fn is_valid(i64 target, i64[] numbers, bool part2) {
    let operations = 2 + part2;
    let count = numbers.len() - 2;
    let combinations = math::pow(operations, count);
    i64 result = 0;

    for let i = 0; i < combinations; i += 1 {
        result = numbers[1];
        let combination = i;

        for let j = 0; j < count; j += 1 {
            let operation = combination % operations;
            combination /= operations;

            if operation == 0b00 {
                result += numbers[j + 2];
                continue;
            }

            if operation == 0b01 {
                result *= numbers[j + 2];
                continue;
            }

            if part2 && operation == 0b10 {
                result = concat(result, numbers[j + 2]);
                continue;
            }

            if result > target {
                break;
            }
        }

        if result == target {
            return true;
        }
    }

    return false;
}

fn solution(i64[][] numbers, bool part2) -> i64 {
    i64 total;

    for nums in numbers {
        if is_valid(nums[0], nums, part2) {
            total += nums[0];
        }
    }

    return total;
}

fn main(string[] args) {
    let contents = io::read_to_string(args[1]);
    i64[][] numbers = contents
        .split("\n")
        .map(string::nums);

    $dbg(solution(numbers, false));
    $dbg(solution(numbers, true));
}
