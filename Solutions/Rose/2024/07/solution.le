use std/collections/array;
use std/split;
use std/cast;
use std/math;
use std/io;

fn concat(i64 a, i64 b) -> i64 {
    if b < 10 { return a * 10 + b; }
    if b < 100 { return a * 100 + b; }
    if b < 1000 { return a * 1000 + b; }
}

fn is_valid(i64 target, Array<i64> *numbers, bool part2) -> bool {
    i64 combinations = math::pow(2 + part2, numbers.len() - 1);
    i64 result; i64 combination; i64 operation;

    for i32 i = 0; i < combinations; i += 1 {
        result = numbers[0];
        combination = i;

        for i32 j = 0; j < numbers.len() - 1; j += 1 {
            operation = combination % (2 + part2);
            combination /= (2 + part2);

            if operation == 0b00 {
                result += numbers[j + 1];
                continue;
            }

            if operation == 0b01 {
                result *= numbers[j + 1];
                continue;
            }

            if part2 && operation == 0b10 {
                result = concat(result, numbers[j + 1]);
                continue;
            }

            if result > target {
                break;
            }
        }

        if result == target {
            return true;
        }
    }

    return false;
}

fn solution(Array<string> *data, bool part2) -> i64 {
    i64 total = 0;

    for i32 j = 0; j < data.len(); j += 1 {
        Array<string> *parts = data[j].split(": ");
        defer parts.free();

        i64 target = i64::parse(parts[0]);
        Array<string> *strings = parts[1].split(" ");
        defer strings.free();

        Array<i64> *numbers = Array::new();
        defer numbers.free();

        for i32 i = 0; i < strings.len(); i += 1 {
            numbers.push(i64::parse(strings[i]));
        }

        if is_valid(target, numbers, part2) {
            total += target;
        }
    }

    return total;
}

fn main(i32 argc, string *argv) {
    string contents = io::read_to_string(argv[1]);
    Array<string> *lines = contents.split("\n");
    defer lines.free();

    io::dbg(solution(lines, false));
    io::dbg(solution(lines, true));
}
