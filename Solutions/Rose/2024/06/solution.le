use std/collections/hashset;
use std/collections/array;
use std/split;
use std/io;

use util;

fn loop(i32 cx, i32 cy, i32 sx, i32 sy, HashSet<i32> *visited, i32 rows, i32 cols, string *grid) {
    visited.clear();

    i32 y = sy;
    i32 x = sx;
    i32 dir = 0;

    while true {
        i32 encoded = encode3(x, y, dir);
        i32 *tuple = dir4[dir];
        i32 ny = y + tuple[0];
        i32 nx = x + tuple[1];

        if (ny < 0) || (ny >= rows) || (nx < 0) || (nx >= cols) {
            return false;
        }

        if grid[ny][nx] == '#' || (ny == cy && nx == cx) {
            dir = (dir + 1) % #len(dir4);
        } else {
            y = ny;
            x = nx;

            if visited.contains(encoded) {
                return true;
            }

            visited.add(encoded);
        }
    }
}

fn s1(i32 *x, i32 *y, i32 *dir, i32 rows, i32 cols, string *grid) {
    i32 count = 1; // Stating position is an X

    while true {
        i32 *inner = dir4[*dir];
        i32 dx = inner[0];
        i32 dy = inner[1];
        i32 ny = *y + dx;
        i32 nx = *x + dy;

        if ny < 0 || ny >= rows || nx < 0 || nx >= cols {
            break;
        }

        if grid[ny][nx] == '#' {
            *dir = (*dir + 1) % #len(dir4);
        } else {
            *y += dx;
            *x += dy;

            if grid[*y][*x] != 'X' {
                count += 1;
            }

            grid[*y][*x] = 'X';
        }
    }

    return count;
}

fn s2(i32 sx, i32 sy, i32 rows, i32 cols, string *grid) {
    HashSet<i32> *visited = HashSet::with_capacity(rows * cols);
    i32 c = 0;

    for i32 i = 0; i < rows; i += 1 {
        string row = grid[i];

        for i32 j = 0; j < cols; j += 1 {
            char col = row[j];

            if i == sy && j == sx {
                continue;
            }

            if col == 'X' && loop(j, i, sx, sy, visited, rows, cols, grid) {
                c += 1;
            }
        }
    }

    return c;
}

fn main(i32 argc, string *argv) {
    i32 x; i32 y; i32 sx; i32 sy; i32 dir;
    string contents = io::read_to_string(argv[1]);
    Array<string> *lines = contents.split("\n");
    Array<string> *grid = Array::new();

    defer lines.free();
    defer grid.free();

    for i32 i = 0; i < lines.len(); i += 1 {
        if lines[i].contains("^") {
            y = grid.len();
            x = lines[i].find("^");

            lines[i] = lines[i].replace("^", "X");
            sy = y;
            sx = x;
        }

        grid.push(lines[i]);
    }

    i32 rows = grid.len();
    i32 cols = grid[0].len();

    // s1 MUST run for s2 to give the right answer
    io::dbg(s1(&x, &y, &dir, rows, cols, grid.elements));
    io::dbg(s2(sx, sy, rows, cols, grid.elements));
}
