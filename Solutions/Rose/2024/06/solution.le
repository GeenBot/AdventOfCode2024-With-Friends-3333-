use util;

fn loop(i32 cx, i32 cy, i32 sx, i32 sy, (i32, i32)[] dirs, string[] grid) {
    HashSet<Triple<i32, i32, i32> *> *visited = HashSet::with_capacity(grid.len() * grid[0].len());

    let y = sy;
    let x = sx;
    let dir = 0;

    while true {
        let triple = $$(y, x, dir);

        if visited.contains(triple) {
            return true;
        }

        visited.add(triple);
        let tuple = dirs[dir];
        let ny = y + tuple.x;
        let nx = x + tuple.y;

        if (ny < 0) || (ny >= grid.len()) || (nx < 0) || (nx >= grid[0].len()) {
            return false;
        }

        if grid[ny][nx] == '#' || (ny == cy && nx == cx) {
            dir = (dir + 1) % dirs.len();
        } else {
            y = ny;
            x = nx;
        }
    }

    return false;
}

fn s1(i32 *x, i32 *y, i32 *dir, string[] grid) {
    let count = 1; // Stating position is an X

    while true {
        let inner = dir4[*dir];
        let dx = inner.x;
        let dy = inner.y;
        let ny = *y + dx;
        let nx = *x + dy;

        if ny < 0 || ny >= grid.len() || nx < 0 || nx >= grid[0].len() {
            break;
        }

        if grid[ny][nx] == '#' {
            *dir = (*dir + 1) % dir4.len();
        } else {
            *y += dx;
            *x += dy;

            if grid[*y][*x] != 'X' {
                count += 1;
            }

            grid[*y][*x] = 'X';
        }
    }

    return count;
}

fn s2(i32 sx, i32 sy, string[] grid) {
    let dirs = dir4;
    let c = 0;

    for row in grid {
        for col in row {
            if #i(row) == sy && #i(col) == sx {
                continue;
            }

            if col == 'X' && loop(#i(col), #i(row), sx, sy, dirs, grid) {
                c += 1;
            }
        }
    }

    return c;
}

fn main(string[] args) {
    i32 x; i32 y; i32 sx; i32 sy; i32 dir;
    let contents = io::read_to_string(args[1]);
    let lines = contents.split("\n");
    string[] grid = [];

    for line in lines {
        if line.contains("^") {
            y = grid.len();
            x = line.find("^");

            line = line.replace("^", "X");
            sy = y;
            sx = x;
        }

        grid.push(line);
    }

    // s1 MUST run for s2 to give the right answer
    $dbg(s1(&x, &y, &dir, grid));
    $dbg(s2(sx, sy, grid));
}
