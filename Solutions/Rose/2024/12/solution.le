use std/collections/hashmap;
use std/collections/hashset;
use std/collections/array;
use std/split;
use std/cast;
use std/io;

use util;

fn dfs(Array<string> *grid, HashSet<i32> *v, i32 r, i32 c, i32 p) {
    Array<i32> *stack = Array::new(encode2(r, c));
    HashSet<i32> *a = HashSet::new();

    while !stack.is_empty() {
        i32 encoded = stack.pop();
        i32 *decoded = decode2<i32>(encoded);
        i32 x = decoded[0];
        i32 y = decoded[1];

        if (v.contains(encoded)) || (x < 0) || (x >= grid.len())
            || (y < 0) || (y >= grid[0].len()) || (grid[x][y] != p) {
            continue;
        }

        v.add(encoded);
        a.add(encoded);

        i32 **ds = [[x + 1, y], [x - 1, y], [x, y + 1], [x, y - 1]];
        for i32 n = 0; n < #len(ds); n += 1 {
            i32 nx = ds[n][0];
            i32 ny = ds[n][1];
            i32 encoded = encode2(nx, ny);

            if !v.contains(encoded) {
                stack.push(encoded);
            }
        }
    }

    return a;
}

fn solution(Array<string> *grid, bool part2) {
    HashMap<i32, void *> *rs = HashMap::new();
    HashSet<i32> *v = HashSet::new();
    i32 res = 0;

    for i32 r = 0; r < grid.len(); r += 1 {
        for i32 c = 0; c < grid[0].len(); c += 1 {
            if !v.contains(encode2<i32>(r, c)) {
                HashSet<i32> *area = dfs(grid, v, r, c, grid[r][c]);

                if !rs.contains_key(grid[r][c]) {
                    rs[grid[r][c]] = Array::new<void *>();
                }

                ((Array<void *> *)(rs[grid[r][c]])).push(area);
            }
        }
    }

    Array<i32> *keys = rs.keys();

    for i32 i = 0; i < keys.len(); i += 1 {
        i32 key = keys[i];
        Array<void *> *value = rs[key];

        for i32 j = 0; j < value.len(); j += 1 {
            HashSet<i32> *set = value[j];
            Array<i32> *area = set.values();

            i32 bc = 0;
            i32 sc = 0;

            for i32 k = 0; k < area.len(); k += 1 {
                i32 *p = decode2(area[k]);
                i32 **nds = [
                    [p[0] + dir4[0][0], p[1] + dir4[0][1]],
                    [p[0] + dir4[1][0], p[1] + dir4[1][1]],
                    [p[0] + dir4[2][0], p[1] + dir4[2][1]],
                    [p[0] + dir4[3][0], p[1] + dir4[3][1]],
                ];

                for i32 l = 0; l < #len(nds); l += 1 {
                    i32 *d = nds[l];
                    if !area.contains(encode2(d[0], d[1])) {
                        bc += 1;
                    }
                }
            }

            for i32 k = 0; k < #len(dir4); k += 1 {
                i32 *d = dir4[k];

                HashSet<i32> *s = HashSet::new();
                for i32 l = 0; l < area.len(); l += 1 {
                    i32 *p = decode2<i32>(area[l]);
                    i32 encoded = encode2<i32>(p[0] + d[0], p[1] + d[1]);

                    if !area.contains(encoded) {
                        s.add(encoded);
                    }
                }

                HashSet<i32> *sr = HashSet::new();
                Array<i32> *sv = s.values();
                for i32 l = 0; l < sv.len(); l += 1 {
                    i32 *p = decode2<i32>(sv[l]);
                    i32 x = encode2<i32>(p[0] + d[1], p[1] + d[0]);

                    while sv.contains(x) {
                        sr.add(x);
                        i32 *de = decode2<i32>(x);
                        x = encode2<i32>(de[0] + d[1], de[1] + d[0]);
                    }
                }

                sc += s.size() - sr.size();
            }

            if part2 {
                res += area.len() * sc;
            } else {
                res += area.len() * bc;
            }
        }
    }

    return res;
}

fn main(i32 argc, string *argv) {
    string contents = io::read_to_string(argv[1]);
    Array<string> *grid = contents.split("\n");
    io::dbg(solution(grid, false));
    io::dbg(solution(grid, true));
}
