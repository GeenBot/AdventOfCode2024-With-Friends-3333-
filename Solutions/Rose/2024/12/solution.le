use util;

const (i32, i32)[] DIRS = [$(0, 1), $(0, -1), $(1, 0), $(-1, 0)];

fn dfs(char[][] grid, bool[][] v, (i32, i32) rc, i32 p) {
    let a = HashSet::new<(i32, i32)>();
    let stack = [rc];

    while !stack.is_empty() {
        let item = stack.pop();
        let x = item.x;
        let y = item.y;

        if x < 0 || x >= grid.len()
            || y < 0 || y >= grid[0].len()
            || v[x][y] || grid[x][y] != p {
            continue;
        }

        v[x][y] = true;
        a.add(item);

        for d in #[$(x + 1, y), $(x - 1, y), $(x, y + 1), $(x, y - 1)] {
            if d.x >= 0 && d.x < v.len() && d.y >= 0 && d.y < v[0].len() && !v[d.x][d.y] {
                stack.push(d);
            }
        }
    }

    return a;
}

fn solution(HashMap<i32, HashSet<(i32, i32)> *[]> *rs, bool part2) {
    let res = 0;

    for key in rs.keys() {
        for set in rs[key] {
            let area = set.values();
            let bc = 0;
            let sc = 0;

            for p in area {
                let nds = #[
                    $(p.x + DIRS[0].x, p.y + DIRS[0].y),
                    $(p.x + DIRS[1].x, p.y + DIRS[1].y),
                    $(p.x + DIRS[2].x, p.y + DIRS[2].y),
                    $(p.x + DIRS[3].x, p.y + DIRS[3].y),
                ];

                for d in nds {
                    if !area.contains(d) {
                        bc += 1;
                    }
                }
            }

            for d in DIRS {
                let s = HashSet::new<(i32, i32)>();

                for p in area {
                    let x = $(p.x + d.x, p.y + d.y);

                    if !area.contains(x) {
                        s.add(x);
                    }
                }

                let sr = HashSet::new<(i32, i32)>();

                for p in s.values() {
                    let x = $(p.x + d.y, p.y + d.x);

                    while s.contains(x) {
                        sr.add(x);
                        x = $(x.x + d.y, x.y + d.x);
                    }
                }

                sc += s.size() - sr.size();
            }

            if part2 {
                res += area.len() * sc;
            } else {
                res += area.len() * bc;
            }
        }
    }

    return res;
}

fn main(string[] args) {
    let contents = io::read_to_string(args[1]);
    let parts = contents.split("\n");
    let rs = HashMap::new<i32, HashSet<(i32, i32)> *[]>();
    char[][] grid = parts.map(Array::from_string);
    bool[][] v = [];

    for part in parts {
        bool[] inner = [];

        for _ in part {
            inner.push(false);
        }

        v.push(inner);
    }

    for let r = 0; r < grid.len(); r += 1 {
        for let c = 0; c < grid[0].len(); c += 1 {
            let x = $(r, c);

            if !v[r][c] {
                let area = dfs(grid, v, x, grid[r][c]);
                rs.get_or_insert(grid[r][c], Array::new<any>()).push(area);
            }
        }
    }

    $dbg(solution(rs, false));
    $dbg(solution(rs, true));
}
