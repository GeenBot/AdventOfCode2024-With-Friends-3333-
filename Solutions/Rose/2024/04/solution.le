use util;

fn check_word(string[] grid, string word, i32 x, i32 y, i32 dx, i32 dy) {
    let rows = grid.len();
    let cols = grid[0].len();

    for let k = 0; k < word.len(); k += 1 {
        let nx = x + k * dx;
        let ny = y + k * dy;

        if nx < 0 || nx >= rows || ny < 0 || ny >= cols || grid[nx][ny] != word[k] {
            return false;
        }
    }

    return true;
}

fn s1(string[] grid) {
    let rows = grid.len();
    let cols = grid[0].len();
    let count = 0;

    let word = "XMAS";
    let dirs = #[
        $(0, 1),
        $(0, -1),
        $(1, 0),
        $(-1, 0),
        $(1, 1),
        $(-1, -1),
        $(1, -1),
        $(-1, 1)
    ];

    for let r = 0; r < rows; r += 1 {
        for let c = 0; c < cols; c += 1 {
            for dir in dirs {
                if check_word(grid, word, r, c, dir.x, dir.y) {
                    count += 1;
                }
            }
        }
    }

    return count;
}

fn pattern_exists(string[][] pat, char[] pattern) -> bool {
    for inner in pat {
        let matches = true;

        for let j = 0; j < inner.len(); j += 1 {
            if inner[j] != pattern[j] {
                matches = false;
                break;
            }
        }

        if matches {
            return true;
        }
    }

    return false;
}

fn check_pattern(string[] grid, string[][] pat, i32 x, i32 y) {
    let p1 = [grid[x][y], grid[x + 1][y + 1], grid[x + 2][y + 2]];
    let p2 = [grid[x][y + 2], grid[x + 1][y + 1], grid[x + 2][y]];
    return pattern_exists(pat, p1) && pattern_exists(pat, p2);
}

fn s2(string[] grid) {
    let rows = grid.len();
    let cols = grid[0].len();
    let count = 0;

    let pat = [
        ["M", "A", "S"],
        ["S", "A", "M"],
    ];

    for let i = 0; i < rows - 2; i += 1 {
        for let j = 0; j < cols - 2; j += 1 {
            if check_pattern(grid, pat, i, j) {
                count += 1;
            }
        }
    }

    return count;
}


fn main(i32 argc, string *argv) {
    let contents = io::read_to_string(argv[1]);
    let grid = contents.split("\n");
    io::dbg(s1(grid));
    io::dbg(s2(grid));
}
