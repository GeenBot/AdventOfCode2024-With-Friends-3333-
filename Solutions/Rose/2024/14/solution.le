use ../util;

const i64 rows = 101;
const i64 cols = 103;

fn parse(string[] c) -> (i64[], i64[])[] {
    let robots = [];

    for line in c {
        string[] parts = line.split(" ");
        i64[] p = parts[0].nums();
        i64[] v = parts[1].nums();

        robots.push($(p, v));
    }

    return robots;
}

fn quadrant(i64 nx, i64 ny, i32[] ans) {
    if (nx == rows / 2) || (ny == cols / 2) {
        return;
    }

    if (nx < rows / 2) && (ny < cols / 2) {
        ans[0] += 1;
        return;
    }

    if (nx > rows / 2) && (ny < cols / 2) {
        ans[1] += 1;
        return;
    }

    if (nx < rows / 2) && (ny > cols / 2) {
        ans[2] += 1;
        return;
    }

    ans[3] += 1;
}

fn solution((i64[], i64[])[] robots) {
    let ans = [0, 0, 0, 0];
    let s = 0;

    while true {
        i32[][] grid = [];

        for let i = 0; i < cols; i += 1 {
            i32[] row = [];

            for let j = 0; j < rows; j += 1 {
                row.push(0);
            }

            grid.push(row);
        }

        s += 1;
        let inv = false;

        for let i = 0; i < robots.len(); i += 1 {
            let nx = (robots[i].x[0] + s * robots[i].y[0]).mod(rows);
            let ny = (robots[i].x[1] + s * robots[i].y[1]).mod(cols);

            if s == 100 {
                quadrant(nx, ny, ans);
            }

            grid[ny][nx] += 1;

            if grid[ny][nx] > 1 {
                inv = true;
            }
        }

        if s == 100 {
            $dbg(ans[0] * ans[1] * ans[2] * ans[3]);
        }

        if !inv {
            break;
        }
    }

    return s;
}

fn main(string[] args) {
    let contents = io::read_to_string(args[1]);
    let lines = contents.split("\n");
    let robots = parse(lines);
    $dbg(solution(robots));
}
