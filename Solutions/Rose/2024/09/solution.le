use ../util;

fn checksum(i64[] blocks) {
    i64 sum = 0;

    for block in blocks {
        if block != -1 {
            sum += #i(block) * block;
        }
    }

    return sum;
}

fn s1(i32[] numbers) {
    i64[] blocks = [];
    i64 id = 0;

    for n in numbers {
        for let j = 0; j < n; j += 1 {
            blocks.push(id);
        }

        id += 1;

        if #i(n) + 1 < numbers.len() {
            for let j = 0; j < numbers[#i(n) + 1]; j += 1 {
                blocks.push(-1);
            }
        }

        #i(n) += 1; // Increment by 2
    }

    i32[] empty = [];

    for block in blocks {
        if block == -1 {
            empty.push(#i(block));
        }
    }

    let last_non_empty = blocks.len() - 1;

    for start_pos in empty {
        while last_non_empty > start_pos && blocks[last_non_empty] == -1 {
            last_non_empty -= 1;
        }

        if last_non_empty <= start_pos {
            break;
        }

        blocks[start_pos] = blocks[last_non_empty];
        blocks[last_non_empty] = -1;

        last_non_empty -= 1;
    }

    return checksum(blocks);
}

fn s2(i32[] numbers) {
    let ids = HashSet::new<i64>();
    i64[] blocks = [];
    i64[] sizes = [];
    i32[] free_sections = [];
    i32[] free_sizes = [];
    i64 id = 0;

    for n in numbers {
        sizes.push(n);
        ids.add(id);

        for let j = 0; j < n; j += 1 {
            blocks.push(id);
        }

        id += 1;

        if #i(n) + 1 < numbers.len() {
            let start = blocks.len();

            for let j = 0; j < numbers[#i(n) + 1]; j += 1 {
                blocks.push(-1);
            }

            free_sections.push(start);
            free_sizes.push(numbers[#i(n) + 1]);
        }

        #i(n) += 1; // Increment by 2
    }

    for i64 id = sizes.len() - 1; id >= 0; id -= 1 {
        if !ids.contains(id) {
            continue;
        }

        let size = sizes[id];
        let start = -1;

        for let i = 0; i < blocks.len(); i += 1 {
            if blocks[i] == id {
                start = i;
                break;
            }
        }

        let best_pos = -1;

        for let j = 0; j < free_sections.len(); j += 1 {
            if free_sizes[j] >= size {
                best_pos = free_sections[j];
                free_sections[j] += size;
                free_sizes[j] -= size;

                if free_sizes[j] == 0 {
                    free_sections.remove(j);
                    free_sizes.remove(j);
                }

                break;
            }
        }

        if (best_pos != -1) && (best_pos < start) {
            for let i = start; i < start + size; i += 1 {
                blocks[i] = -1;
            }

            free_sections.push(start);
            free_sizes.push(size);

            for let i = best_pos; i < best_pos + size; i += 1 {
                blocks[i] = id;
            }
        }

        ids.remove(id);
    }

    return checksum(blocks);
}

fn main(string[] args) {
    let contents = io::read_to_string(args[1]);
    i32[] numbers = [];

    for char c in contents {
        numbers.push(c - '0');
    }

    $dbg(s1(numbers));
    $dbg(s2(numbers));
}
