use std/collections/array;
use std/split;
use std/cast;
use std/math;
use std/io;

fn lists(i32[] ls, i32[] rs, string input) {
    let parts = input.split("\n");

    for part in parts {
        let numbers = part.split("   ");
        ls.push(i32::parse(numbers[0]));
        rs.push(i32::parse(numbers[1]));
    }
}

fn s1(i32[] ls, i32[] rs) {
    let lss = ls.clone();
    let rss = rs.clone();
    lss.sort();
    rss.sort();

    let dist = 0;

    for let i = 0; i < lss.len(); i += 1 {
        dist += math::abs(lss[i] - rss[i]);
    }

    return dist;
}

fn s2(i32[] ls, i32[] rs) {
    i32[] counts = [];

    for r in rs {
        while r >= counts.len() {
            counts.push(0);
        }

        counts[r] += 1;
    }

    let score = 0;

    for l in ls {
        if l < counts.len() {
            score += l * counts[l];
        }
    }

    return score;
}

fn main(i32 argc, string *argv) {
    i32[] ls = [];
    i32[] rs = [];
    lists(ls, rs, io::read_to_string(argv[1]));

    io::dbg(s1(ls, rs));
    io::dbg(s2(ls, rs));
}
