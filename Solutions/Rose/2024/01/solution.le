use std/collections/array;
use std/split;
use std/cast;
use std/math;
use std/io;

fn lists(Array<i32> *ls, Array<i32> *rs, string input) {
    Array<string> *parts = input.split("\n");

    for i32 i = 0; i < parts.len(); i += 1 {
        Array<string> *numbers = parts.elements[i].split("   ");
        ls.push(i32::parse(numbers.elements[0]));
        rs.push(i32::parse(numbers.elements[1]));
    }
}

fn s1(Array<i32> *ls, Array<i32> *rs) {
    Array<i32> *lss = ls.clone();
    Array<i32> *rss = rs.clone();

    lss.sort();
    rss.sort();

    i32 dist = 0;

    for i32 i = 0; i < lss.len(); i += 1 {
        dist += math::abs(lss.elements[i] - rss.elements[i]);
    }

    return dist;
}

fn s2(Array<i32> *ls, Array<i32> *rs) {
    Array<i32> *counts = Array::with_capacity(10);
    defer counts.free();

    for i32 i = 0; i < rs.len(); i += 1 {
        i32 r = rs.elements[i];

        while r >= counts.len() {
            counts.push(0);
        }

        counts.elements[r] += 1;
    }

    i32 score = 0;

    for i32 i = 0; i < ls.len(); i += 1 {
        i32 l = ls.elements[i];

        if ls.elements[i] < counts.len() {
            score += l * counts.elements[l];
        }
    }

    return score;
}

fn main() {
    Array<i32> *ls = Array::new();
    Array<i32> *rs = Array::new();
    defer ls.free();
    defer rs.free();

    lists(ls, rs, io::read_to_string("input.txt"));

    io::dbg(s1(ls, rs));
    io::dbg(s2(ls, rs));
}
