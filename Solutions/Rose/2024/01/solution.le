use ../util;

fn lists(string input) {
    parts := input.split("\n").map<i64[]>(string::nums);
    ls := parts.map<i64>(fn(i64[] nums) nums[0]);
    rs := parts.map<i64>(fn(i64[] nums) nums[1]);

    return $(ls, rs);
}

fn s1(i64[] ls, i64[] rs) {
    lss := ls.clone();
    rss := rs.clone();
    lss.sort();
    rss.sort();

    dist := 0;

    for i in 0..lss.len() {
        dist += math::abs(lss[i] - rss[i]);
    }

    return dist;
}

fn s2(i64[] ls, i64[] rs) {
    counts := [i64;];

    for r in rs {
        while r >= counts.len() {
            counts.push(0);
        }

        counts[r] += 1;
    }

    score := 0;

    for l in ls {
        if l < counts.len() {
            score += l * counts[l];
        }
    }

    return score;
}

fn main(string[] args) {
    res := lists(io::read_to_string(args[1]));
    ls := res.x;
    rs := res.y;

    $dbg(s1(ls, rs));
    $dbg(s2(ls, rs));
}
